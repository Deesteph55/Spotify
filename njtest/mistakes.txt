 /*state = {
    contacts: []
  };*/

  /* componentDidMount() {
    axios.get("http://jsonplaceholder.typicode.com/users").then(response => {
      console.log(response);
      this.setState({
        contacts: response.data
      });
    });
  }
*/

 {/*} <img src={logo} className="App-logo" alt="logo" />
        <h1>Spotify</h1>
        <ul>
          {this.state.contacts.map(contact => (
            <li key={contact.id}>{contact.name}</li>
          ))}
        </ul>
          </div>*/}

          // createTable = () => {
  //   let table = []
  //   for (let i = 0; i < 3; i++) {
  //     let children = []
  //     //Inner loop to create children
  //     for (let j = 0; j < 5; j++) {
  //       children.push(<td>{`Column ${j + 1}`}</td>)
  //     }
  //     //Create the parent and add the children
  //     table.push(<tr>{children}</tr>)
  //   }
  //   return table

  // }

  //   fetchResults = (query) => {
  //     spotifyApi.searchTracks("Love").then(
  //       function(data) {
  //         console.log('Search by "Love"', data);
  //       },
  //       function(err) {
  //         console.error(err);
  //       }
  //     );
  //   };

    fetchSearchResults = (updatedPageNo = "", query) => {
    const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : "";
    // By default the limit of results is 20
    const searchUrl = `https://pixabay.com/api/?key=12413278-79b713c7e196c7a3defb5330e&q=${query}${pageNumber}`;
    if (this.cancel) {
      // Cancel the previous request before making a new request
      this.cancel.cancel();
    }
    // Create a new CancelToken
    this.cancel = axios.CancelToken.source();
    axios
      .get(searchUrl, {
        cancelToken: this.cancel.token
      })
      .then(res => {
        const resultNotFoundMsg = !res.data.hits.length
          ? "There are no more search results. Please try a new search."
          : "";
        this.setState({
          results: res.data.hits,
          message: resultNotFoundMsg,
          loading: false
        });
      })
      .catch(error => {
        if (axios.isCancel(error) || error) {
          this.setState({
            loading: false,
            message: "Failed to fetch results.Please check network"
          });
        }
      });
  };